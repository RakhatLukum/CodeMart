// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: cart.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CartService_AddToCart_FullMethodName            = "/cart.CartService/AddToCart"
	CartService_RemoveFromCart_FullMethodName       = "/cart.CartService/RemoveFromCart"
	CartService_ClearCart_FullMethodName            = "/cart.CartService/ClearCart"
	CartService_GetCart_FullMethodName              = "/cart.CartService/GetCart"
	CartService_GetCartItems_FullMethodName         = "/cart.CartService/GetCartItems"
	CartService_UpdateCartItem_FullMethodName       = "/cart.CartService/UpdateCartItem"
	CartService_HasProductInCart_FullMethodName     = "/cart.CartService/HasProductInCart"
	CartService_GetCartItemCount_FullMethodName     = "/cart.CartService/GetCartItemCount"
	CartService_GetCartTotalPrice_FullMethodName    = "/cart.CartService/GetCartTotalPrice"
	CartService_SendCartSummaryEmail_FullMethodName = "/cart.CartService/SendCartSummaryEmail"
	CartService_InvalidateCartCache_FullMethodName  = "/cart.CartService/InvalidateCartCache"
	CartService_GetAllFromRedis_FullMethodName      = "/cart.CartService/GetAllFromRedis"
	CartService_GetAllFromCache_FullMethodName      = "/cart.CartService/GetAllFromCache"
)

// CartServiceClient is the client API for CartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartServiceClient interface {
	AddToCart(ctx context.Context, in *CreateCartRequest, opts ...grpc.CallOption) (*CreateCartResponse, error)
	RemoveFromCart(ctx context.Context, in *DeleteCartItemRequest, opts ...grpc.CallOption) (*DeleteCartItemResponse, error)
	ClearCart(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCart(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*CartListResponse, error)
	GetCartItems(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*CartItemsResponse, error)
	UpdateCartItem(ctx context.Context, in *UpdateCartItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	HasProductInCart(ctx context.Context, in *HasProductInCartRequest, opts ...grpc.CallOption) (*HasProductInCartResponse, error)
	GetCartItemCount(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*CartItemCountResponse, error)
	GetCartTotalPrice(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*CartTotalPriceResponse, error)
	SendCartSummaryEmail(ctx context.Context, in *SendCartSummaryEmailRequest, opts ...grpc.CallOption) (*EmailStatusResponse, error)
	InvalidateCartCache(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*CacheResponse, error)
	GetAllFromRedis(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CartListResponse, error)
	GetAllFromCache(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CartListResponse, error)
}

type cartServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCartServiceClient(cc grpc.ClientConnInterface) CartServiceClient {
	return &cartServiceClient{cc}
}

func (c *cartServiceClient) AddToCart(ctx context.Context, in *CreateCartRequest, opts ...grpc.CallOption) (*CreateCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCartResponse)
	err := c.cc.Invoke(ctx, CartService_AddToCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) RemoveFromCart(ctx context.Context, in *DeleteCartItemRequest, opts ...grpc.CallOption) (*DeleteCartItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCartItemResponse)
	err := c.cc.Invoke(ctx, CartService_RemoveFromCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) ClearCart(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CartService_ClearCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) GetCart(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*CartListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartListResponse)
	err := c.cc.Invoke(ctx, CartService_GetCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) GetCartItems(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*CartItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartItemsResponse)
	err := c.cc.Invoke(ctx, CartService_GetCartItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) UpdateCartItem(ctx context.Context, in *UpdateCartItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CartService_UpdateCartItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) HasProductInCart(ctx context.Context, in *HasProductInCartRequest, opts ...grpc.CallOption) (*HasProductInCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HasProductInCartResponse)
	err := c.cc.Invoke(ctx, CartService_HasProductInCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) GetCartItemCount(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*CartItemCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartItemCountResponse)
	err := c.cc.Invoke(ctx, CartService_GetCartItemCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) GetCartTotalPrice(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*CartTotalPriceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartTotalPriceResponse)
	err := c.cc.Invoke(ctx, CartService_GetCartTotalPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) SendCartSummaryEmail(ctx context.Context, in *SendCartSummaryEmailRequest, opts ...grpc.CallOption) (*EmailStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmailStatusResponse)
	err := c.cc.Invoke(ctx, CartService_SendCartSummaryEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) InvalidateCartCache(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*CacheResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CacheResponse)
	err := c.cc.Invoke(ctx, CartService_InvalidateCartCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) GetAllFromRedis(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CartListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartListResponse)
	err := c.cc.Invoke(ctx, CartService_GetAllFromRedis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) GetAllFromCache(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CartListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartListResponse)
	err := c.cc.Invoke(ctx, CartService_GetAllFromCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartServiceServer is the server API for CartService service.
// All implementations must embed UnimplementedCartServiceServer
// for forward compatibility.
type CartServiceServer interface {
	AddToCart(context.Context, *CreateCartRequest) (*CreateCartResponse, error)
	RemoveFromCart(context.Context, *DeleteCartItemRequest) (*DeleteCartItemResponse, error)
	ClearCart(context.Context, *UserIDRequest) (*emptypb.Empty, error)
	GetCart(context.Context, *UserIDRequest) (*CartListResponse, error)
	GetCartItems(context.Context, *UserIDRequest) (*CartItemsResponse, error)
	UpdateCartItem(context.Context, *UpdateCartItemRequest) (*emptypb.Empty, error)
	HasProductInCart(context.Context, *HasProductInCartRequest) (*HasProductInCartResponse, error)
	GetCartItemCount(context.Context, *UserIDRequest) (*CartItemCountResponse, error)
	GetCartTotalPrice(context.Context, *UserIDRequest) (*CartTotalPriceResponse, error)
	SendCartSummaryEmail(context.Context, *SendCartSummaryEmailRequest) (*EmailStatusResponse, error)
	InvalidateCartCache(context.Context, *UserIDRequest) (*CacheResponse, error)
	GetAllFromRedis(context.Context, *emptypb.Empty) (*CartListResponse, error)
	GetAllFromCache(context.Context, *emptypb.Empty) (*CartListResponse, error)
	mustEmbedUnimplementedCartServiceServer()
}

// UnimplementedCartServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCartServiceServer struct{}

func (UnimplementedCartServiceServer) AddToCart(context.Context, *CreateCartRequest) (*CreateCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToCart not implemented")
}
func (UnimplementedCartServiceServer) RemoveFromCart(context.Context, *DeleteCartItemRequest) (*DeleteCartItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromCart not implemented")
}
func (UnimplementedCartServiceServer) ClearCart(context.Context, *UserIDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearCart not implemented")
}
func (UnimplementedCartServiceServer) GetCart(context.Context, *UserIDRequest) (*CartListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCart not implemented")
}
func (UnimplementedCartServiceServer) GetCartItems(context.Context, *UserIDRequest) (*CartItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartItems not implemented")
}
func (UnimplementedCartServiceServer) UpdateCartItem(context.Context, *UpdateCartItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCartItem not implemented")
}
func (UnimplementedCartServiceServer) HasProductInCart(context.Context, *HasProductInCartRequest) (*HasProductInCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasProductInCart not implemented")
}
func (UnimplementedCartServiceServer) GetCartItemCount(context.Context, *UserIDRequest) (*CartItemCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartItemCount not implemented")
}
func (UnimplementedCartServiceServer) GetCartTotalPrice(context.Context, *UserIDRequest) (*CartTotalPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartTotalPrice not implemented")
}
func (UnimplementedCartServiceServer) SendCartSummaryEmail(context.Context, *SendCartSummaryEmailRequest) (*EmailStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCartSummaryEmail not implemented")
}
func (UnimplementedCartServiceServer) InvalidateCartCache(context.Context, *UserIDRequest) (*CacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateCartCache not implemented")
}
func (UnimplementedCartServiceServer) GetAllFromRedis(context.Context, *emptypb.Empty) (*CartListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFromRedis not implemented")
}
func (UnimplementedCartServiceServer) GetAllFromCache(context.Context, *emptypb.Empty) (*CartListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFromCache not implemented")
}
func (UnimplementedCartServiceServer) mustEmbedUnimplementedCartServiceServer() {}
func (UnimplementedCartServiceServer) testEmbeddedByValue()                     {}

// UnsafeCartServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartServiceServer will
// result in compilation errors.
type UnsafeCartServiceServer interface {
	mustEmbedUnimplementedCartServiceServer()
}

func RegisterCartServiceServer(s grpc.ServiceRegistrar, srv CartServiceServer) {
	// If the following call pancis, it indicates UnimplementedCartServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CartService_ServiceDesc, srv)
}

func _CartService_AddToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).AddToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_AddToCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).AddToCart(ctx, req.(*CreateCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_RemoveFromCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCartItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).RemoveFromCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_RemoveFromCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).RemoveFromCart(ctx, req.(*DeleteCartItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_ClearCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).ClearCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_ClearCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).ClearCart(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_GetCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).GetCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_GetCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).GetCart(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_GetCartItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).GetCartItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_GetCartItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).GetCartItems(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_UpdateCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCartItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).UpdateCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_UpdateCartItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).UpdateCartItem(ctx, req.(*UpdateCartItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_HasProductInCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasProductInCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).HasProductInCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_HasProductInCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).HasProductInCart(ctx, req.(*HasProductInCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_GetCartItemCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).GetCartItemCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_GetCartItemCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).GetCartItemCount(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_GetCartTotalPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).GetCartTotalPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_GetCartTotalPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).GetCartTotalPrice(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_SendCartSummaryEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCartSummaryEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).SendCartSummaryEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_SendCartSummaryEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).SendCartSummaryEmail(ctx, req.(*SendCartSummaryEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_InvalidateCartCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).InvalidateCartCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_InvalidateCartCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).InvalidateCartCache(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_GetAllFromRedis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).GetAllFromRedis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_GetAllFromRedis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).GetAllFromRedis(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_GetAllFromCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).GetAllFromCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_GetAllFromCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).GetAllFromCache(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CartService_ServiceDesc is the grpc.ServiceDesc for CartService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cart.CartService",
	HandlerType: (*CartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToCart",
			Handler:    _CartService_AddToCart_Handler,
		},
		{
			MethodName: "RemoveFromCart",
			Handler:    _CartService_RemoveFromCart_Handler,
		},
		{
			MethodName: "ClearCart",
			Handler:    _CartService_ClearCart_Handler,
		},
		{
			MethodName: "GetCart",
			Handler:    _CartService_GetCart_Handler,
		},
		{
			MethodName: "GetCartItems",
			Handler:    _CartService_GetCartItems_Handler,
		},
		{
			MethodName: "UpdateCartItem",
			Handler:    _CartService_UpdateCartItem_Handler,
		},
		{
			MethodName: "HasProductInCart",
			Handler:    _CartService_HasProductInCart_Handler,
		},
		{
			MethodName: "GetCartItemCount",
			Handler:    _CartService_GetCartItemCount_Handler,
		},
		{
			MethodName: "GetCartTotalPrice",
			Handler:    _CartService_GetCartTotalPrice_Handler,
		},
		{
			MethodName: "SendCartSummaryEmail",
			Handler:    _CartService_SendCartSummaryEmail_Handler,
		},
		{
			MethodName: "InvalidateCartCache",
			Handler:    _CartService_InvalidateCartCache_Handler,
		},
		{
			MethodName: "GetAllFromRedis",
			Handler:    _CartService_GetAllFromRedis_Handler,
		},
		{
			MethodName: "GetAllFromCache",
			Handler:    _CartService_GetAllFromCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cart.proto",
}

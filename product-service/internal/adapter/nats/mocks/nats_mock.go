// Code generated by MockGen. DO NOT EDIT.
// Source: internal/adapter/nats/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/adapter/nats/interface.go -destination=internal/adapter/nats/mocks/nats_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/RakhatLukum/CodeMart/product-service/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockPublisherInterface is a mock of PublisherInterface interface.
type MockPublisherInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherInterfaceMockRecorder
	isgomock struct{}
}

// MockPublisherInterfaceMockRecorder is the mock recorder for MockPublisherInterface.
type MockPublisherInterfaceMockRecorder struct {
	mock *MockPublisherInterface
}

// NewMockPublisherInterface creates a new mock instance.
func NewMockPublisherInterface(ctrl *gomock.Controller) *MockPublisherInterface {
	mock := &MockPublisherInterface{ctrl: ctrl}
	mock.recorder = &MockPublisherInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisherInterface) EXPECT() *MockPublisherInterfaceMockRecorder {
	return m.recorder
}

// PublishProductCreated mocks base method.
func (m *MockPublisherInterface) PublishProductCreated(product model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishProductCreated", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishProductCreated indicates an expected call of PublishProductCreated.
func (mr *MockPublisherInterfaceMockRecorder) PublishProductCreated(product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishProductCreated", reflect.TypeOf((*MockPublisherInterface)(nil).PublishProductCreated), product)
}

// PublishProductDeleted mocks base method.
func (m *MockPublisherInterface) PublishProductDeleted(productID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishProductDeleted", productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishProductDeleted indicates an expected call of PublishProductDeleted.
func (mr *MockPublisherInterfaceMockRecorder) PublishProductDeleted(productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishProductDeleted", reflect.TypeOf((*MockPublisherInterface)(nil).PublishProductDeleted), productID)
}

// PublishProductUpdated mocks base method.
func (m *MockPublisherInterface) PublishProductUpdated(product model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishProductUpdated", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishProductUpdated indicates an expected call of PublishProductUpdated.
func (mr *MockPublisherInterfaceMockRecorder) PublishProductUpdated(product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishProductUpdated", reflect.TypeOf((*MockPublisherInterface)(nil).PublishProductUpdated), product)
}

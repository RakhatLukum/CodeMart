// Code generated by MockGen. DO NOT EDIT.
// Source: internal/adapter/inmemory/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/adapter/inmemory/interface.go -destination=internal/adapter/inmemory/mocks/inmemory_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/RakhatLukum/CodeMart/product-service/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
	isgomock struct{}
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockClientInterface) Delete(productID int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", productID)
}

// Delete indicates an expected call of Delete.
func (mr *MockClientInterfaceMockRecorder) Delete(productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClientInterface)(nil).Delete), productID)
}

// Get mocks base method.
func (m *MockClientInterface) Get(productID int) (model.Product, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", productID)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClientInterfaceMockRecorder) Get(productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClientInterface)(nil).Get), productID)
}

// GetAll mocks base method.
func (m *MockClientInterface) GetAll() []model.Product {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.Product)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockClientInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockClientInterface)(nil).GetAll))
}

// Set mocks base method.
func (m *MockClientInterface) Set(product model.Product) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", product)
}

// Set indicates an expected call of Set.
func (mr *MockClientInterfaceMockRecorder) Set(product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockClientInterface)(nil).Set), product)
}

// SetMany mocks base method.
func (m *MockClientInterface) SetMany(products []model.Product) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMany", products)
}

// SetMany indicates an expected call of SetMany.
func (mr *MockClientInterfaceMockRecorder) SetMany(products any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMany", reflect.TypeOf((*MockClientInterface)(nil).SetMany), products)
}

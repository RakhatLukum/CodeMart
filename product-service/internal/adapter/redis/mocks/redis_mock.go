// Code generated by MockGen. DO NOT EDIT.
// Source: internal/adapter/redis/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/adapter/redis/interface.go -destination=internal/adapter/redis/mocks/redis_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/RakhatLukum/CodeMart/product-service/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
	isgomock struct{}
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockClientInterface) Delete(ctx context.Context, productID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClientInterfaceMockRecorder) Delete(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClientInterface)(nil).Delete), ctx, productID)
}

// Get mocks base method.
func (m *MockClientInterface) Get(ctx context.Context, productID int) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, productID)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClientInterfaceMockRecorder) Get(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClientInterface)(nil).Get), ctx, productID)
}

// GetAll mocks base method.
func (m *MockClientInterface) GetAll(ctx context.Context) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockClientInterfaceMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockClientInterface)(nil).GetAll), ctx)
}

// Set mocks base method.
func (m *MockClientInterface) Set(ctx context.Context, product model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockClientInterfaceMockRecorder) Set(ctx, product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockClientInterface)(nil).Set), ctx, product)
}

// SetMany mocks base method.
func (m *MockClientInterface) SetMany(ctx context.Context, products []model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMany", ctx, products)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMany indicates an expected call of SetMany.
func (mr *MockClientInterfaceMockRecorder) SetMany(ctx, products any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMany", reflect.TypeOf((*MockClientInterface)(nil).SetMany), ctx, products)
}

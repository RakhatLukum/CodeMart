// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/analytics.proto

package analytics_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ViewService_CreateView_FullMethodName                   = "/view.ViewService/CreateView"
	ViewService_GetViewsByUser_FullMethodName               = "/view.ViewService/GetViewsByUser"
	ViewService_GetViewsByProduct_FullMethodName            = "/view.ViewService/GetViewsByProduct"
	ViewService_GetViewsByUserAndProduct_FullMethodName     = "/view.ViewService/GetViewsByUserAndProduct"
	ViewService_GetRecentViews_FullMethodName               = "/view.ViewService/GetRecentViews"
	ViewService_GetMostViewedProducts_FullMethodName        = "/view.ViewService/GetMostViewedProducts"
	ViewService_GetUserTopProducts_FullMethodName           = "/view.ViewService/GetUserTopProducts"
	ViewService_GetProductViewCount_FullMethodName          = "/view.ViewService/GetProductViewCount"
	ViewService_GetUserViewCount_FullMethodName             = "/view.ViewService/GetUserViewCount"
	ViewService_GetDailyViews_FullMethodName                = "/view.ViewService/GetDailyViews"
	ViewService_GenerateDailyViewReportEmail_FullMethodName = "/view.ViewService/GenerateDailyViewReportEmail"
	ViewService_GetHourlyViews_FullMethodName               = "/view.ViewService/GetHourlyViews"
	ViewService_DeleteOldViews_FullMethodName               = "/view.ViewService/DeleteOldViews"
	ViewService_GetCachedView_FullMethodName                = "/view.ViewService/GetCachedView"
	ViewService_GetMemoryCachedView_FullMethodName          = "/view.ViewService/GetMemoryCachedView"
)

// ViewServiceClient is the client API for ViewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ViewServiceClient interface {
	CreateView(ctx context.Context, in *CreateViewRequest, opts ...grpc.CallOption) (*CreateViewResponse, error)
	GetViewsByUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserViewsResponse, error)
	GetViewsByProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductViewsResponse, error)
	GetViewsByUserAndProduct(ctx context.Context, in *UserProductRequest, opts ...grpc.CallOption) (*UserProductViewsResponse, error)
	GetRecentViews(ctx context.Context, in *RecentViewsRequest, opts ...grpc.CallOption) (*RecentViewsResponse, error)
	GetMostViewedProducts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MostViewedProductsResponse, error)
	GetUserTopProducts(ctx context.Context, in *UserTopProductsRequest, opts ...grpc.CallOption) (*UserTopProductsResponse, error)
	GetProductViewCount(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductViewCountResponse, error)
	GetUserViewCount(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserViewCountResponse, error)
	GetDailyViews(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DailyViewsResponse, error)
	GenerateDailyViewReportEmail(ctx context.Context, in *ReportEmailRequest, opts ...grpc.CallOption) (*ReportEmailResponse, error)
	GetHourlyViews(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*HourlyViewsResponse, error)
	DeleteOldViews(ctx context.Context, in *DeleteOldViewsRequest, opts ...grpc.CallOption) (*DeleteOldViewsResponse, error)
	GetCachedView(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ViewResponse, error)
	GetMemoryCachedView(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ViewResponse, error)
}

type viewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewViewServiceClient(cc grpc.ClientConnInterface) ViewServiceClient {
	return &viewServiceClient{cc}
}

func (c *viewServiceClient) CreateView(ctx context.Context, in *CreateViewRequest, opts ...grpc.CallOption) (*CreateViewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateViewResponse)
	err := c.cc.Invoke(ctx, ViewService_CreateView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) GetViewsByUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserViewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserViewsResponse)
	err := c.cc.Invoke(ctx, ViewService_GetViewsByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) GetViewsByProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductViewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductViewsResponse)
	err := c.cc.Invoke(ctx, ViewService_GetViewsByProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) GetViewsByUserAndProduct(ctx context.Context, in *UserProductRequest, opts ...grpc.CallOption) (*UserProductViewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserProductViewsResponse)
	err := c.cc.Invoke(ctx, ViewService_GetViewsByUserAndProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) GetRecentViews(ctx context.Context, in *RecentViewsRequest, opts ...grpc.CallOption) (*RecentViewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecentViewsResponse)
	err := c.cc.Invoke(ctx, ViewService_GetRecentViews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) GetMostViewedProducts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MostViewedProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MostViewedProductsResponse)
	err := c.cc.Invoke(ctx, ViewService_GetMostViewedProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) GetUserTopProducts(ctx context.Context, in *UserTopProductsRequest, opts ...grpc.CallOption) (*UserTopProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserTopProductsResponse)
	err := c.cc.Invoke(ctx, ViewService_GetUserTopProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) GetProductViewCount(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductViewCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductViewCountResponse)
	err := c.cc.Invoke(ctx, ViewService_GetProductViewCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) GetUserViewCount(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserViewCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserViewCountResponse)
	err := c.cc.Invoke(ctx, ViewService_GetUserViewCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) GetDailyViews(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DailyViewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DailyViewsResponse)
	err := c.cc.Invoke(ctx, ViewService_GetDailyViews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) GenerateDailyViewReportEmail(ctx context.Context, in *ReportEmailRequest, opts ...grpc.CallOption) (*ReportEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportEmailResponse)
	err := c.cc.Invoke(ctx, ViewService_GenerateDailyViewReportEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) GetHourlyViews(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*HourlyViewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HourlyViewsResponse)
	err := c.cc.Invoke(ctx, ViewService_GetHourlyViews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) DeleteOldViews(ctx context.Context, in *DeleteOldViewsRequest, opts ...grpc.CallOption) (*DeleteOldViewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOldViewsResponse)
	err := c.cc.Invoke(ctx, ViewService_DeleteOldViews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) GetCachedView(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ViewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ViewResponse)
	err := c.cc.Invoke(ctx, ViewService_GetCachedView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) GetMemoryCachedView(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ViewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ViewResponse)
	err := c.cc.Invoke(ctx, ViewService_GetMemoryCachedView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ViewServiceServer is the server API for ViewService service.
// All implementations must embed UnimplementedViewServiceServer
// for forward compatibility.
type ViewServiceServer interface {
	CreateView(context.Context, *CreateViewRequest) (*CreateViewResponse, error)
	GetViewsByUser(context.Context, *UserRequest) (*UserViewsResponse, error)
	GetViewsByProduct(context.Context, *ProductRequest) (*ProductViewsResponse, error)
	GetViewsByUserAndProduct(context.Context, *UserProductRequest) (*UserProductViewsResponse, error)
	GetRecentViews(context.Context, *RecentViewsRequest) (*RecentViewsResponse, error)
	GetMostViewedProducts(context.Context, *Empty) (*MostViewedProductsResponse, error)
	GetUserTopProducts(context.Context, *UserTopProductsRequest) (*UserTopProductsResponse, error)
	GetProductViewCount(context.Context, *ProductRequest) (*ProductViewCountResponse, error)
	GetUserViewCount(context.Context, *UserRequest) (*UserViewCountResponse, error)
	GetDailyViews(context.Context, *Empty) (*DailyViewsResponse, error)
	GenerateDailyViewReportEmail(context.Context, *ReportEmailRequest) (*ReportEmailResponse, error)
	GetHourlyViews(context.Context, *ProductRequest) (*HourlyViewsResponse, error)
	DeleteOldViews(context.Context, *DeleteOldViewsRequest) (*DeleteOldViewsResponse, error)
	GetCachedView(context.Context, *ProductRequest) (*ViewResponse, error)
	GetMemoryCachedView(context.Context, *ProductRequest) (*ViewResponse, error)
	mustEmbedUnimplementedViewServiceServer()
}

// UnimplementedViewServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedViewServiceServer struct{}

func (UnimplementedViewServiceServer) CreateView(context.Context, *CreateViewRequest) (*CreateViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateView not implemented")
}
func (UnimplementedViewServiceServer) GetViewsByUser(context.Context, *UserRequest) (*UserViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetViewsByUser not implemented")
}
func (UnimplementedViewServiceServer) GetViewsByProduct(context.Context, *ProductRequest) (*ProductViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetViewsByProduct not implemented")
}
func (UnimplementedViewServiceServer) GetViewsByUserAndProduct(context.Context, *UserProductRequest) (*UserProductViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetViewsByUserAndProduct not implemented")
}
func (UnimplementedViewServiceServer) GetRecentViews(context.Context, *RecentViewsRequest) (*RecentViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentViews not implemented")
}
func (UnimplementedViewServiceServer) GetMostViewedProducts(context.Context, *Empty) (*MostViewedProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMostViewedProducts not implemented")
}
func (UnimplementedViewServiceServer) GetUserTopProducts(context.Context, *UserTopProductsRequest) (*UserTopProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTopProducts not implemented")
}
func (UnimplementedViewServiceServer) GetProductViewCount(context.Context, *ProductRequest) (*ProductViewCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductViewCount not implemented")
}
func (UnimplementedViewServiceServer) GetUserViewCount(context.Context, *UserRequest) (*UserViewCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserViewCount not implemented")
}
func (UnimplementedViewServiceServer) GetDailyViews(context.Context, *Empty) (*DailyViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyViews not implemented")
}
func (UnimplementedViewServiceServer) GenerateDailyViewReportEmail(context.Context, *ReportEmailRequest) (*ReportEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateDailyViewReportEmail not implemented")
}
func (UnimplementedViewServiceServer) GetHourlyViews(context.Context, *ProductRequest) (*HourlyViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHourlyViews not implemented")
}
func (UnimplementedViewServiceServer) DeleteOldViews(context.Context, *DeleteOldViewsRequest) (*DeleteOldViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOldViews not implemented")
}
func (UnimplementedViewServiceServer) GetCachedView(context.Context, *ProductRequest) (*ViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCachedView not implemented")
}
func (UnimplementedViewServiceServer) GetMemoryCachedView(context.Context, *ProductRequest) (*ViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemoryCachedView not implemented")
}
func (UnimplementedViewServiceServer) mustEmbedUnimplementedViewServiceServer() {}
func (UnimplementedViewServiceServer) testEmbeddedByValue()                     {}

// UnsafeViewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ViewServiceServer will
// result in compilation errors.
type UnsafeViewServiceServer interface {
	mustEmbedUnimplementedViewServiceServer()
}

func RegisterViewServiceServer(s grpc.ServiceRegistrar, srv ViewServiceServer) {
	// If the following call pancis, it indicates UnimplementedViewServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ViewService_ServiceDesc, srv)
}

func _ViewService_CreateView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).CreateView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewService_CreateView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).CreateView(ctx, req.(*CreateViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_GetViewsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).GetViewsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewService_GetViewsByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).GetViewsByUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_GetViewsByProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).GetViewsByProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewService_GetViewsByProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).GetViewsByProduct(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_GetViewsByUserAndProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).GetViewsByUserAndProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewService_GetViewsByUserAndProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).GetViewsByUserAndProduct(ctx, req.(*UserProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_GetRecentViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecentViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).GetRecentViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewService_GetRecentViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).GetRecentViews(ctx, req.(*RecentViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_GetMostViewedProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).GetMostViewedProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewService_GetMostViewedProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).GetMostViewedProducts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_GetUserTopProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTopProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).GetUserTopProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewService_GetUserTopProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).GetUserTopProducts(ctx, req.(*UserTopProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_GetProductViewCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).GetProductViewCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewService_GetProductViewCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).GetProductViewCount(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_GetUserViewCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).GetUserViewCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewService_GetUserViewCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).GetUserViewCount(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_GetDailyViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).GetDailyViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewService_GetDailyViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).GetDailyViews(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_GenerateDailyViewReportEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).GenerateDailyViewReportEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewService_GenerateDailyViewReportEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).GenerateDailyViewReportEmail(ctx, req.(*ReportEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_GetHourlyViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).GetHourlyViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewService_GetHourlyViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).GetHourlyViews(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_DeleteOldViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOldViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).DeleteOldViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewService_DeleteOldViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).DeleteOldViews(ctx, req.(*DeleteOldViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_GetCachedView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).GetCachedView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewService_GetCachedView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).GetCachedView(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_GetMemoryCachedView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).GetMemoryCachedView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewService_GetMemoryCachedView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).GetMemoryCachedView(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ViewService_ServiceDesc is the grpc.ServiceDesc for ViewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ViewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "view.ViewService",
	HandlerType: (*ViewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateView",
			Handler:    _ViewService_CreateView_Handler,
		},
		{
			MethodName: "GetViewsByUser",
			Handler:    _ViewService_GetViewsByUser_Handler,
		},
		{
			MethodName: "GetViewsByProduct",
			Handler:    _ViewService_GetViewsByProduct_Handler,
		},
		{
			MethodName: "GetViewsByUserAndProduct",
			Handler:    _ViewService_GetViewsByUserAndProduct_Handler,
		},
		{
			MethodName: "GetRecentViews",
			Handler:    _ViewService_GetRecentViews_Handler,
		},
		{
			MethodName: "GetMostViewedProducts",
			Handler:    _ViewService_GetMostViewedProducts_Handler,
		},
		{
			MethodName: "GetUserTopProducts",
			Handler:    _ViewService_GetUserTopProducts_Handler,
		},
		{
			MethodName: "GetProductViewCount",
			Handler:    _ViewService_GetProductViewCount_Handler,
		},
		{
			MethodName: "GetUserViewCount",
			Handler:    _ViewService_GetUserViewCount_Handler,
		},
		{
			MethodName: "GetDailyViews",
			Handler:    _ViewService_GetDailyViews_Handler,
		},
		{
			MethodName: "GenerateDailyViewReportEmail",
			Handler:    _ViewService_GenerateDailyViewReportEmail_Handler,
		},
		{
			MethodName: "GetHourlyViews",
			Handler:    _ViewService_GetHourlyViews_Handler,
		},
		{
			MethodName: "DeleteOldViews",
			Handler:    _ViewService_DeleteOldViews_Handler,
		},
		{
			MethodName: "GetCachedView",
			Handler:    _ViewService_GetCachedView_Handler,
		},
		{
			MethodName: "GetMemoryCachedView",
			Handler:    _ViewService_GetMemoryCachedView_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/analytics.proto",
}
